//1、创建常量字符串
NSString * string = @"This is a String!";
 
//2、创建空字符串，赋值
NSString * string = [[NSString alloc] init];
string = @"This is a String!";
 
//3、initWithString方法
NSString * string = [[NSString alloc] initWithString:@"This is a String!"];

//4、用C创建字符串:initWithCString方法
char * Cstring = "This is a String!";
NSString * string = [[NSString alloc] initWithCString:Cstring];

//5、创建格式化字符串:占位符（字符串拼接）
NSString * string = [[NSString alloc] initWithString:[NSString stringWithFormat:@"%@ is a %@!",@"This",@"String"]];
 
//6、从当前项目文件夹中创建字符串
NSString * path = [[NSBundle mainBundle] pathForResource:@"string.txt" ofType:nil];
NSString * string = [[NSString alloc] initWithContentsOfFile:path];

//7、创建字符串，并写入到文件  
NSArray * paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString * fileName = [[paths objectAtIndex:0] stringByAppendingPathComponent:@"SignFile"];
NSString * content = @"First Run";
[content writeToFile:fileName atomically:YES encoding:NSASCIIStringEncoding error:nil];
 
//8、比较字符串，isEqualToString方法    
NSString * string01 = @"This is a String!";
NSString * string02 = @"This is a String!";

if([string1 isEqualToString:string2])
{
   NSlog(@"Equal");
}
 
//9、compare方法(comparer返回的三种值)    
NSString * string01 = @"This is a String!";
NSString * string02 = @"This is a String!";    

BOOL result = [string01 compare:string02] == NSOrderedSame;    //NSOrderedSame判断两者内容是否相同

BOOL result = [string01 compare:string02] == NSOrderedAscending;    //NSOrderedAscending判断两对象值的大小(按字母顺序进行比较，astring02大于astring01为真)

BOOL result = [string01 compare:string02] == NSOrderedDescending;    //NSOrderedDescending判断两对象值的大小(按字母顺序进行比较，astring02小于astring01为真)

//10、不考虑大小写比较字符串
NSString * string1 = @"this is a String!";
NSString * string2 = @"This is a String!";
 
BOOL result = [string1 caseInsensitiveCompare:string2] == NSOrderedSame;    //NSOrderedDescending判断两对象值的大小(按字母顺序进行比较，astring02小于astring01为真)

BOOL result = [astring1 compare:astring2 options:NSCaseInsensitiveSearch | NSNumericSearch] == NSOrderedSame;    //NSCaseInsensitiveSearch:不区分大小写比较 NSLiteralSearch:进行完全比较，区分大小写 NSNumericSearch:比较字符串的字符个数，而不是字符值。

//11、输出大写或者小写字符串
NSString * string1 = @"A String"; 
NSString * string2 = @"String"; 
 
NSLog(@"string1:%@",[string1 uppercaseString]);//大写
 
NSLog(@"string2:%@",[string2 lowercaseString]);//小写
 
NSLog(@"string2:%@",[string2 capitalizedString]);//首字母大小

//12、-rangeOfString: //查找字符串某处是否包含其它字符串
NSString * string1 = @"This is a string";
NSString * string2 = @"string";
 
NSRange range = [string1 rangeOfString:string2];
int location = range.location;
int leight = range.length;
 
NSString * string = [[NSString alloc] initWithString:[NSString stringWithFormat:@"Location:%i,Leight:%i",location,leight]];
 
//13、-substringToIndex: 从字符串的开头一直截取到指定的位置，但不包括该位置的字符
NSString * string1 = @"This is a string";
NSString * string2 = [string1 substringToIndex:3];
 
//14、-substringFromIndex: 以指定位置开始（包括指定位置的字符），并包括之后的全部字符
NSString * string1 = @"This is a string";
NSString * string2 = [string1 substringFromIndex:3];
 
//15、-substringWithRange: //按照所给出的位置，长度，任意地从字符串中截取子串
NSString * string1 = @"This is a string";
NSString * string2 = [string1 substringWithRange:NSMakeRange(0, 4)];

//16、-stringWithCapacity: //按照固定长度生成空字符串
NSMutableString * string;
string = [NSMutableString stringWithCapacity:40];

//17、-appendString: and -appendFormat: //把一个字符串接在另一个字符串的末尾
NSMutableString * string1 = [[NSMutableString alloc] initWithString:@"This is a NSMutableString"];
[string1 appendString:@", I will be adding some character"];
[string1 appendFormat:[NSString stringWithFormat:@", I will be adding some character"]];

//18、-insertString: atIndex: //在指定位置插入字符串
NSMutableString * string1 = [[NSMutableString alloc] initWithString:@"This is a NSMutableString"];
[string1 insertString:@"Hi! " atIndex:0];

//19、-setString: 
NSMutableString * string1 = [[NSMutableString alloc] initWithString:@"This is a NSMutableString"];
[string1 setString:@"Hello Word!"];

//20、-replaceCharactersInRange: withString: //用指定字符串替换字符串中某指定位置、长度的字符串
NSMutableString * string1 = [[NSMutableString alloc] initWithString:@"This is a NSMutableString"];
[string1 replaceCharactersInRange:NSMakeRange(0, 4) withString:@"That"];

//21、-hasPrefix: //检查字符串是否以另一个字符串开头
NSString * string1 = @"NSStringInformation.txt";
[string1 hasPrefix:@"NSString"] = = 1 ?  NSLog(@"YES") : NSLog(@"NO");
[string1 hasSuffix:@".txt"] = = 1 ?  NSLog(@"YES") : NSLog(@"NO");
 
//22、扩展路径
NSString * path = @"~/NSData.txt";
NSString * absolutePath = [path stringByExpandingTildeInPath];

NSLog(@"absolutePath:%@",absolutePath);
NSLog(@"Path:%@",[absolutePath stringByAbbreviatingWithTildeInPath]);

//23、文件扩展名
NSString * path = @"~/NSData.txt";
//另一种获取文件扩展名
    NSString * extention = [[path stringByAppendingPathComponent:self.imageName] pathExtension];
    if ([extention isEqualToString:@"png"]) {
        //返回PNG格式的图片数据
        self.imageData = UIImagePNGRepresentation(image);
    }else{
        //返回JPG格式的图片数据，第二个参数为压缩质量：0:best 1:lost
        self.imageData = UIImageJPEGRepresentation(image, 0);
    }
